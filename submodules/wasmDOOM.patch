diff --git a/src/Makefile b/src/Makefile
index 056230e..fc79ceb 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -3,16 +3,17 @@ OUT_NAME=wasm-doom
 OUT_DIR ?= $(shell echo $$OUT_DIR)
 OUT_DIR := $(or $(OUT_DIR),../public/wasm)
 
-SDL_CFLAGS = -D_REENTRANT -D_THREAD_SAFE -s USE_SDL=2 -sUSE_SDL_MIXER=2
+SDL_CFLAGS = -D_REENTRANT -D_THREAD_SAFE -s USE_SDL=2 -sUSE_SDL_MIXER=2 -s SDL2_MIXER_FORMATS='["mid"]'
 INCLUDES=-I../include 
 # For MacOS SDL2 install with homebrew
 INCLUDES+=-I/opt/homebrew/include
 # TODO - Look into Linux and Windows SDL2 install paths
 CC=emcc
 CFLAGS+= $(INCLUDES) $(SDL_CFLAGS)
-CFLAGS+=-Wall -DFEATURE_SOUND
-CFLAGS+=-sEXPORTED_RUNTIME_METHODS=FS,callMain -sMODULARIZE=1 -sEXPORT_ES6 -sINVOKE_RUN=0
-LIBS+=-lm -lSDL2 -lSDL2_mixer `sdl2-config --cflags --libs`
+CFLAGS+=-flto -O3 -Wall -DFEATURE_SOUND
+CFLAGS+=-sEXPORTED_RUNTIME_METHODS=callMain -sEXPORTED_FUNCTIONS=_main,_pause_game,_unpause_game,_mute,_unmute,_end_game,_pause_main_loop,_resume_main_loop -sMODULARIZE=1 -sEXPORT_ES6 -sINVOKE_RUN=0 -s ASSERTIONS=0 -s ALLOW_MEMORY_GROWTH=1 --preload-file=../../wasmDOOM-files/doom.wad@/doom.wad --preload-file=../../wasmDOOM-files/timidity@/etc/ -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=0
+LDFLAGS+=-flto -O3
+LIBS+=-lm -lSDL2 -lSDL2_mixer
 OBJDIR=$(SOURCE_DIR)/build
 OUTPUT=$(OUT_DIR)/$(OUT_NAME)
 SRC_DOOM = i_main.o \
diff --git a/src/d_main.c b/src/d_main.c
index 8f01311..0035645 100644
--- a/src/d_main.c
+++ b/src/d_main.c
@@ -431,7 +431,7 @@ void D_DoomLoop (void)
     I_GraphicsCheckCommandLine();
     I_SetGrabMouseCallback(D_GrabMouseCallback);
     I_InitGraphics();
-    I_SetWindowTitle(gamedescription);
+    // I_SetWindowTitle(gamedescription);
     I_EnableLoadingDisk();
 
     V_RestoreBuffer();
@@ -1622,7 +1622,7 @@ void D_DoomMain (void)
 
     // This does not work in the wasm environment.
     I_InitSound(true);
-    // I_InitMusic();
+    I_InitMusic();
 
 #ifdef FEATURE_MULTIPLAYER
     printf ("NET_Init: Init network subsystem.\n");
diff --git a/src/g_game.c b/src/g_game.c
index 9954d78..77ff07c 100644
--- a/src/g_game.c
+++ b/src/g_game.c
@@ -15,7 +15,7 @@
 // DESCRIPTION:  none
 //
 
-
+#include <emscripten/emscripten.h>
 
 #include <string.h>
 #include <stdlib.h>
@@ -229,7 +229,15 @@ int		bodyqueslot;
  
 int             vanilla_savegame_limit = 1;
 int             vanilla_demo_limit = 1;
- 
+
+void EMSCRIPTEN_KEEPALIVE pause_game() {
+    paused = 1;
+}
+
+void EMSCRIPTEN_KEEPALIVE unpause_game() {
+    paused = 0;
+}
+
 int G_CmdChecksum (ticcmd_t* cmd) 
 { 
     size_t		i;
diff --git a/src/i_sdlmusic.c b/src/i_sdlmusic.c
index c2101b7..ee20829 100644
--- a/src/i_sdlmusic.c
+++ b/src/i_sdlmusic.c
@@ -16,7 +16,7 @@
 //	System interface for music.
 //
 
-
+#include <emscripten/emscripten.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -63,6 +63,17 @@
 #define OGG_ID_HEADER        1
 #define OGG_COMMENT_HEADER   3
 
+void EMSCRIPTEN_KEEPALIVE mute() {
+    Mix_Volume(-1, 0);
+    Mix_VolumeMusic(0);
+}
+
+void EMSCRIPTEN_KEEPALIVE unmute() {
+    Mix_Volume(-1, MIX_MAX_VOLUME);
+    Mix_VolumeMusic(MIX_MAX_VOLUME);
+}
+
+
 // Structure for music substitution.
 // We store a mapping based on SHA1 checksum -> filename of substitute music
 // file to play, so that substitution occurs based on content rather than
@@ -950,7 +961,7 @@ static boolean I_SDL_InitMusic(void)
     // Once initialization is complete, the temporary Timidity config
     // file can be removed.
 
-    RemoveTimidityConfig();
+    // RemoveTimidityConfig();
 
     // If snd_musiccmd is set, we need to call Mix_SetMusicCMD to
     // configure an external music playback program.
@@ -1121,7 +1132,10 @@ static boolean ConvertMus(byte *musdata, int len, char *filename)
     {
         mem_get_buf(outstream, &outbuf, &outbuf_len);
 
-        M_WriteFile(filename, outbuf, outbuf_len);
+        if (!M_WriteFile(filename, outbuf, outbuf_len))
+            fprintf(stderr, "Failed M_WriteFile %s\n", filename);
+    } else {
+        fprintf(stderr, "Failed mus2mid: %d\n", result);
     }
 
     mem_fclose(instream);
diff --git a/src/i_video.c b/src/i_video.c
index fe7f700..fef31f4 100644
--- a/src/i_video.c
+++ b/src/i_video.c
@@ -232,8 +232,8 @@ void I_InitGraphics (void)
     }
     else 
     {
-        window = SDL_CreateWindow("DOOM", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 
-            SDL_RESX, SDL_RESY, SDL_WINDOW_FULLSCREEN_DESKTOP);
+        window = SDL_CreateWindow(NULL, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
+            SDL_RESX, SDL_RESY, 0);
         renderer =  SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
         texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGB888, SDL_TEXTUREACCESS_TARGET, 
             SDL_RESX, SDL_RESY);
diff --git a/src/m_menu.c b/src/m_menu.c
index 6df9655..34f2d79 100644
--- a/src/m_menu.c
+++ b/src/m_menu.c
@@ -18,6 +18,7 @@
 //
 
 
+#include <emscripten/emscripten.h>
 #include <stdlib.h>
 #include <ctype.h>
 
@@ -1029,6 +1030,20 @@ void M_ChangeMessages(int choice)
 }
 
 
+void EMSCRIPTEN_KEEPALIVE end_game() {
+    currentMenu->lastOn = itemOn;
+    M_ClearMenus ();
+    D_StartTitle ();
+}
+
+void EMSCRIPTEN_KEEPALIVE pause_main_loop() {
+	emscripten_pause_main_loop();
+}
+
+void EMSCRIPTEN_KEEPALIVE resume_main_loop() {
+	emscripten_resume_main_loop();
+}
+
 //
 // M_EndGame
 //
@@ -1130,7 +1145,8 @@ int     quitsounds2[8] =
 
 void M_QuitResponse(int key)
 {
-    if (key != key_menu_confirm)
+    EM_ASM({Module.onQuit()});
+//    if (key != key_menu_confirm)
 	return;
     if (!netgame)
     {
